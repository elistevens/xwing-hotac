// Generated by CoffeeScript 1.10.0
(function() {
  var EnemyAi, clone, exportObj,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  clone = function(obj) {
    var flags, key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = clone(obj[key]);
    }
    return newInstance;
  };

  EnemyAi = (function() {
    function EnemyAi() {
      var bearing, dir, dist, i, index, j, k, l, len, len1, len2, len3, move_tup, ref, ref1, ref2, ref3;
      this.movement_dict = {};
      this.movement_dict.ahead = clone(this.genericMovement_dict.ahead);
      this.movement_dict.behind = clone(this.genericMovement_dict.behind);
      ref = ['ahead', 'flank', 'behind'];
      for (i = 0, len = ref.length; i < len; i++) {
        dir = ref[i];
        ref1 = ['right', 'left'];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          bearing = ref1[j];
          this.movement_dict["" + dir + bearing] = {};
          ref2 = ['far', 'near'];
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            dist = ref2[k];
            this.movement_dict["" + dir + bearing][dist] = [];
            ref3 = this.genericMovement_dict[dir + "x"][dist];
            for (index = l = 0, len3 = ref3.length; l < len3; index = ++l) {
              move_tup = ref3[index];
              move_tup = clone(move_tup);
              if (move_tup[1] === 'x') {
                move_tup[1] = bearing;
              }
              this.movement_dict["" + dir + bearing][dist][index] = move_tup;
            }
          }
        }
      }
    }

    EnemyAi.prototype.initDom = function(elem_id) {
      var bearing, dir, distance, i, len, ref, results, sector, t;
      this.elem_id = elem_id;
      $("#" + this.elem_id + " .panel-title").text(this.name + " AI");
      $("#" + this.elem_id + " .displayship i").removeClass().addClass("xwing-miniatures-ship xwing-miniatures-ship-" + this.id);
      ref = ['ahead', 'flank', 'behind'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        dir = ref[i];
        results.push((function() {
          var j, len1, ref1, results1;
          ref1 = ['', 'right', 'left'];
          results1 = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            bearing = ref1[j];
            sector = "" + dir + bearing;
            if (sector !== 'flank') {
              results1.push((function() {
                var k, len2, ref2, results2;
                ref2 = ['far', 'near'];
                results2 = [];
                for (k = 0, len2 = ref2.length; k < len2; k++) {
                  distance = ref2[k];
                  t = this;
                  $("#" + this.elem_id + " ." + sector + "." + distance).on('click', null, {
                    'sector': sector,
                    'distance': distance
                  }, function(event) {
                    return t.onClick_move(event);
                  });
                  results2.push($("#" + this.elem_id + " .displayship").on('click', null, null, function(event) {
                    return t.onClick_ship(event);
                  }));
                }
                return results2;
              }).call(this));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    EnemyAi.prototype.onClick_move = function(event) {
      var color, move_str, move_tup;
      move_tup = this.movement_dict[event.data.sector][event.data.distance][Math.floor(Math.random() * 6)];
      move_str = "" + move_tup[0] + (move_tup[1] || '') + move_tup[2];
      color = this.color_dict[move_str] || 'white';
      console.log(event.data.sector + " " + event.data.distance + ": " + move_str);
      $("#" + this.elem_id + " .display i").removeClass();
      $("#" + this.elem_id + " .display span").removeClass().text('');
      $("#" + this.elem_id + " ." + event.data.sector + "." + event.data.distance + ".display i").addClass("xwing-miniatures-font xwing-miniatures-font-" + move_tup[0] + (move_tup[1] || '') + " " + color);
      return $("#" + this.elem_id + " ." + event.data.sector + "." + event.data.distance + ".display span").addClass(color).text(move_tup[2]);
    };

    EnemyAi.prototype.onClick_ship = function(event) {
      $("#" + this.elem_id + " .display i").removeClass();
      return $("#" + this.elem_id + " .display span").text('');
    };

    return EnemyAi;

  })();

  exportObj.shipAi = {};

  exportObj.shipAi.TieFighter = (function(superClass) {
    extend(TieFighter, superClass);

    function TieFighter() {
      return TieFighter.__super__.constructor.apply(this, arguments);
    }

    TieFighter.prototype.name = 'TIE Fighter';

    TieFighter.prototype.id = 'tiefighter';

    TieFighter.prototype.color_dict = {
      kturn3: 'red',
      kturn4: 'red'
    };

    TieFighter.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 5], ['straight', null, 5], ['straight', null, 5], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3]],
        near: [['bank', 'left', 2], ['bank', 'right', 2], ['straight', null, 2], ['straight', null, 2], ['kturn', null, 4], ['kturn', null, 4]]
      },
      aheadx: {
        far: [['straight', null, 3], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['straight', null, 2], ['bank', 'x', 2], ['bank', 'x', 2], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 1]]
      },
      flankx: {
        far: [['bank', 'x', 3], ['turn', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 4]]
      },
      behindx: {
        far: [['kturn', null, 4], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 4], ['kturn', null, 4]]
      },
      behind: {
        far: [['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 1], ['turn', 'right', 1]],
        near: [['kturn', null, 4], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 3], ['turn', 'right', 3], ['straight', null, 5]]
      }
    };

    return TieFighter;

  })(EnemyAi);

  exportObj.shipAi.TieInterceptor = (function(superClass) {
    extend(TieInterceptor, superClass);

    function TieInterceptor() {
      return TieInterceptor.__super__.constructor.apply(this, arguments);
    }

    TieInterceptor.prototype.name = 'TIE Interceptor';

    TieInterceptor.prototype.id = 'tieinterceptor';

    TieInterceptor.prototype.color_dict = {
      kturn3: 'red',
      kturn5: 'red'
    };

    TieInterceptor.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 5], ['straight', null, 5], ['straight', null, 5], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3]],
        near: [['bank', 'left', 2], ['bank', 'right', 2], ['straight', null, 2], ['straight', null, 2], ['kturn', null, 5], ['kturn', null, 5]]
      },
      aheadx: {
        far: [['straight', null, 3], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['straight', null, 2], ['bank', 'x', 2], ['bank', 'x', 2], ['kturn', null, 5], ['kturn', null, 5], ['turn', 'x', 1]]
      },
      flankx: {
        far: [['bank', 'x', 3], ['turn', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 5]]
      },
      behindx: {
        far: [['kturn', null, 5], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 5], ['kturn', null, 5]]
      },
      behind: {
        far: [['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 1], ['turn', 'right', 1]],
        near: [['kturn', null, 5], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 3], ['turn', 'right', 3], ['straight', null, 5]]
      }
    };

    return TieInterceptor;

  })(EnemyAi);

}).call(this);
