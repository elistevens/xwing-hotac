// Generated by CoffeeScript 1.10.0
(function() {
  var EnemyAi, clone, exportObj,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  clone = function(obj) {
    var flags, key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = clone(obj[key]);
    }
    return newInstance;
  };

  EnemyAi = (function() {
    function EnemyAi() {
      var bearing, dir, dist, i, index, j, k, l, len, len1, len2, len3, move_tup, ref, ref1, ref2, ref3;
      this.movement_dict = {};
      this.movement_dict.ahead = clone(this.genericMovement_dict.ahead);
      this.movement_dict.behind = clone(this.genericMovement_dict.behind);
      ref = ['ahead', 'flank', 'behind'];
      for (i = 0, len = ref.length; i < len; i++) {
        dir = ref[i];
        ref1 = ['right', 'left'];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          bearing = ref1[j];
          this.movement_dict["" + dir + bearing] = {};
          ref2 = ['far', 'near'];
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            dist = ref2[k];
            if (this.genericMovement_dict[dir + "x"][dist].length !== 6) {
              console.log(this.name + " " + dir + " " + dist + " length " + this.genericMovement_dict[dir + "x"][dist].length);
            }
            this.movement_dict["" + dir + bearing][dist] = [];
            ref3 = this.genericMovement_dict[dir + "x"][dist];
            for (index = l = 0, len3 = ref3.length; l < len3; index = ++l) {
              move_tup = ref3[index];
              move_tup = clone(move_tup);
              if (move_tup[1] === 'x') {
                move_tup[1] = bearing;
              }
              if (move_tup[1] === 'y') {
                if (bearing === 'left') {
                  move_tup[1] = 'right';
                } else {
                  move_tup[1] = 'left';
                }
              }
              this.movement_dict["" + dir + bearing][dist][index] = move_tup;
            }
          }
        }
      }
    }

    EnemyAi.prototype.initDom = function(ship_str) {
      var bearing, dir, distance, i, j, k, len, len1, len2, ref, ref1, ref2, sector, t;
      this.ship_str = ship_str;
      t = this;
      this.elem_id = "ai-" + this.ship_str;
      $("#" + this.elem_id + " .panel-title").text("" + this.name);
      $("#" + this.elem_id + " .displayship i").removeClass().addClass("xwing-miniatures-ship xwing-miniatures-ship-" + this.id);
      $("\#ai-panel \#ai-toggle-" + this.ship_str + " i").removeClass().addClass("xwing-miniatures-ship xwing-miniatures-ship-" + this.id);
      $("\#ai-panel \#ai-toggle-" + this.ship_str).on('click', null, null, function(event) {
        return t.onClick_toggle(event);
      });
      ref = ['ahead', 'flank', 'behind'];
      for (i = 0, len = ref.length; i < len; i++) {
        dir = ref[i];
        ref1 = ['', 'right', 'left'];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          bearing = ref1[j];
          sector = "" + dir + bearing;
          if (sector !== 'flank') {
            ref2 = ['far', 'near'];
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              distance = ref2[k];
              $("#" + this.elem_id + " ." + sector + "." + distance).on('click', null, {
                'sector': sector,
                'distance': distance
              }, function(event) {
                return t.onClick_move(event);
              });
              $("#" + this.elem_id + " .displayship").on('click', null, null, function(event) {
                return t.onClick_ship(event);
              });
            }
          }
        }
      }
      if (this.defaultshow) {
        return this.onClick_toggle();
      }
    };

    EnemyAi.prototype.onClick_move = function(event) {
      var color, move_str, move_tup;
      move_tup = this.movement_dict[event.data.sector][event.data.distance][Math.floor(Math.random() * 6)];
      move_str = "" + move_tup[0] + (move_tup[1] || '') + move_tup[2];
      color = this.color_dict[move_str] || 'white';
      console.log(event.data.sector + " " + event.data.distance + ": " + move_str);
      $("#" + this.elem_id + " .display i").removeClass();
      $("#" + this.elem_id + " .display span").removeClass().text('');
      $("#" + this.elem_id + " ." + event.data.sector + "." + event.data.distance + ".display i").addClass("xwing-miniatures-font xwing-miniatures-font-" + move_tup[0] + (move_tup[1] || '') + " " + color);
      return $("#" + this.elem_id + " ." + event.data.sector + "." + event.data.distance + ".display span").addClass(color).text(move_tup[2]);
    };

    EnemyAi.prototype.onClick_ship = function(event) {
      $("#" + this.elem_id + " .display i").removeClass();
      return $("#" + this.elem_id + " .display span").text('');
    };

    EnemyAi.prototype.onClick_toggle = function(event) {
      $("#" + this.elem_id).toggleClass('displaynone');
      return $("\#ai-panel \#ai-toggle-" + this.ship_str).toggleClass('glow');
    };

    return EnemyAi;

  })();

  exportObj.shipAi = {};

  exportObj.shipAi.TieFighter = (function(superClass) {
    extend(TieFighter, superClass);

    function TieFighter() {
      return TieFighter.__super__.constructor.apply(this, arguments);
    }

    TieFighter.prototype.name = 'TIE Fighter';

    TieFighter.prototype.id = 'tiefighter';

    TieFighter.prototype.defaultshow = true;

    TieFighter.prototype.color_dict = {
      kturn3: 'red',
      kturn4: 'red'
    };

    TieFighter.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 5], ['straight', null, 5], ['straight', null, 5], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3]],
        near: [['bank', 'left', 2], ['bank', 'right', 2], ['straight', null, 2], ['straight', null, 2], ['kturn', null, 4], ['kturn', null, 4]]
      },
      aheadx: {
        far: [['straight', null, 3], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['straight', null, 2], ['bank', 'x', 2], ['bank', 'x', 2], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 1]]
      },
      flankx: {
        far: [['bank', 'x', 3], ['turn', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 4]]
      },
      behindx: {
        far: [['kturn', null, 4], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 4], ['kturn', null, 4]]
      },
      behind: {
        far: [['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 1], ['turn', 'right', 1]],
        near: [['kturn', null, 4], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 3], ['turn', 'right', 3], ['straight', null, 5]]
      }
    };

    return TieFighter;

  })(EnemyAi);

  exportObj.shipAi.TieInterceptor = (function(superClass) {
    extend(TieInterceptor, superClass);

    function TieInterceptor() {
      return TieInterceptor.__super__.constructor.apply(this, arguments);
    }

    TieInterceptor.prototype.name = 'TIE Interceptor';

    TieInterceptor.prototype.id = 'tieinterceptor';

    TieInterceptor.prototype.defaultshow = true;

    TieInterceptor.prototype.color_dict = {
      kturn3: 'red',
      kturn5: 'red'
    };

    TieInterceptor.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 5], ['straight', null, 5], ['straight', null, 5], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3]],
        near: [['bank', 'left', 2], ['bank', 'right', 2], ['straight', null, 2], ['straight', null, 2], ['kturn', null, 5], ['kturn', null, 5]]
      },
      aheadx: {
        far: [['straight', null, 3], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['straight', null, 2], ['bank', 'x', 2], ['bank', 'x', 2], ['kturn', null, 5], ['kturn', null, 5], ['turn', 'x', 1]]
      },
      flankx: {
        far: [['bank', 'x', 3], ['turn', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 5]]
      },
      behindx: {
        far: [['kturn', null, 5], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 5], ['kturn', null, 5]]
      },
      behind: {
        far: [['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 1], ['turn', 'right', 1]],
        near: [['kturn', null, 5], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 3], ['turn', 'right', 3], ['straight', null, 5]]
      }
    };

    return TieInterceptor;

  })(EnemyAi);

  exportObj.shipAi.TieAdvanced = (function(superClass) {
    extend(TieAdvanced, superClass);

    function TieAdvanced() {
      return TieAdvanced.__super__.constructor.apply(this, arguments);
    }

    TieAdvanced.prototype.name = 'TIE Advanced';

    TieAdvanced.prototype.id = 'tieadvanced';

    TieAdvanced.prototype.color_dict = {
      kturn4: 'red'
    };

    TieAdvanced.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 5], ['straight', null, 5], ['straight', null, 5], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3]],
        near: [['bank', 'left', 1], ['bank', 'right', 1], ['straight', null, 2], ['straight', null, 2], ['kturn', null, 4], ['kturn', null, 4]]
      },
      aheadx: {
        far: [['straight', null, 3], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['straight', null, 2], ['bank', 'x', 1], ['bank', 'x', 1], ['bank', 'x', 1], ['kturn', null, 4], ['kturn', null, 4]]
      },
      flankx: {
        far: [['bank', 'x', 1], ['bank', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 3], ['turn', 'x', 3]],
        near: [['bank', 'x', 1], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2]]
      },
      behindx: {
        far: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2]],
        near: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 1]]
      },
      behind: {
        far: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'left', 2], ['turn', 'right', 2]],
        near: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'left', 3], ['turn', 'right', 3]]
      }
    };

    return TieAdvanced;

  })(EnemyAi);

  exportObj.shipAi.TieBomber = (function(superClass) {
    extend(TieBomber, superClass);

    function TieBomber() {
      return TieBomber.__super__.constructor.apply(this, arguments);
    }

    TieBomber.prototype.name = 'TIE Bomber';

    TieBomber.prototype.id = 'tiebomber';

    TieBomber.prototype.color_dict = {
      kturn5: 'red',
      turnleft2: 'red',
      turnright2: 'red'
    };

    TieBomber.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 4], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3], ['straight', null, 3], ['straight', null, 2]],
        near: [['bank', 'left', 1], ['bank', 'right', 1], ['straight', null, 1], ['straight', null, 1], ['straight', null, 1], ['kturn', null, 5]]
      },
      aheadx: {
        far: [['straight', null, 2], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['turn', 'x', 3], ['straight', null, 1], ['bank', 'x', 1], ['bank', 'x', 1], ['bank', 'x', 1], ['kturn', null, 5]]
      },
      flankx: {
        far: [['bank', 'x', 3], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 3], ['turn', 'x', 3], ['turn', 'x', 3]],
        near: [['bank', 'x', 1], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2]]
      },
      behindx: {
        far: [['kturn', null, 5], ['kturn', null, 5], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 3], ['turn', 'x', 3]],
        near: [['kturn', null, 5], ['kturn', null, 5], ['kturn', null, 5], ['turn', 'x', 3], ['turn', 'x', 3], ['turn', 'x', 2]]
      },
      behind: {
        far: [['kturn', null, 5], ['kturn', null, 5], ['kturn', null, 5], ['kturn', null, 5], ['turn', 'left', 2], ['turn', 'right', 2]],
        near: [['kturn', null, 5], ['kturn', null, 5], ['kturn', null, 5], ['kturn', null, 5], ['turn', 'left', 3], ['turn', 'right', 3]]
      }
    };

    return TieBomber;

  })(EnemyAi);

  exportObj.shipAi.TieDefender = (function(superClass) {
    extend(TieDefender, superClass);

    function TieDefender() {
      return TieDefender.__super__.constructor.apply(this, arguments);
    }

    TieDefender.prototype.name = 'TIE Defender';

    TieDefender.prototype.id = 'tiedefender';

    TieDefender.prototype.color_dict = {
      turnleft1: 'red',
      turnright1: 'red',
      turnleft2: 'red',
      turnright2: 'red'
    };

    TieDefender.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 5], ['straight', null, 5], ['straight', null, 5], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3]],
        near: [['bank', 'left', 1], ['bank', 'right', 1], ['straight', null, 2], ['straight', null, 2], ['kturn', null, 4], ['kturn', null, 4]]
      },
      aheadx: {
        far: [['straight', null, 2], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['straight', null, 2], ['bank', 'x', 1], ['bank', 'x', 1], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 1]]
      },
      flankx: {
        far: [['bank', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 3], ['turn', 'x', 3], ['turn', 'x', 3]],
        near: [['bank', 'x', 1], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 2], ['turn', 'x', 1], ['turn', 'x', 1]]
      },
      behindx: {
        far: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]]
      },
      behind: {
        far: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'left', 1], ['turn', 'right', 1]],
        near: [['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'left', 3], ['turn', 'right', 3]]
      }
    };

    return TieDefender;

  })(EnemyAi);

  exportObj.shipAi.TiePhantom = (function(superClass) {
    extend(TiePhantom, superClass);

    function TiePhantom() {
      return TiePhantom.__super__.constructor.apply(this, arguments);
    }

    TiePhantom.prototype.name = 'TIE Phantom';

    TiePhantom.prototype.id = 'tiephantom';

    TiePhantom.prototype.color_dict = {
      kturn3: 'red',
      kturn4: 'red'
    };

    TiePhantom.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 4], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3], ['straight', null, 3], ['straight', null, 2]],
        near: [['bank', 'left', 2], ['bank', 'right', 2], ['straight', null, 2], ['kturn', null, 4], ['kturn', null, 4], ['kturn', null, 4]]
      },
      aheadx: {
        far: [['straight', null, 3], ['bank', 'x', 2], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3]],
        near: [['straight', null, 2], ['bank', 'x', 2], ['kturn', null, 4], ['kturn', null, 4], ['turn', 'x', 1], ['turn', 'x', 1]]
      },
      flankx: {
        far: [['bank', 'x', 2], ['turn', 'x', 3], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['turn', 'x', 2], ['kturn', null, 4]]
      },
      behindx: {
        far: [['kturn', null, 4], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 1]],
        near: [['turn', 'x', 1], ['turn', 'x', 1], ['turn', 'x', 2], ['kturn', null, 3], ['kturn', null, 4], ['kturn', null, 4]]
      },
      behind: {
        far: [['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 1], ['turn', 'right', 1]],
        near: [['kturn', null, 4], ['kturn', null, 3], ['kturn', null, 3], ['turn', 'left', 3], ['turn', 'right', 3], ['straight', null, 4]]
      }
    };

    return TiePhantom;

  })(EnemyAi);

  exportObj.shipAi.LambdaShuttle = (function(superClass) {
    extend(LambdaShuttle, superClass);

    function LambdaShuttle() {
      return LambdaShuttle.__super__.constructor.apply(this, arguments);
    }

    LambdaShuttle.prototype.name = 'Lambda Shuttle';

    LambdaShuttle.prototype.id = 'lambdaclassshuttle';

    LambdaShuttle.prototype.color_dict = {
      stop0: 'red',
      turnleft2: 'red',
      turnright2: 'red',
      bankleft3: 'red',
      bankright3: 'red'
    };

    LambdaShuttle.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 3], ['straight', null, 3], ['straight', null, 3], ['straight', null, 2], ['straight', null, 2], ['straight', null, 1]],
        near: [['stop', null, 0], ['stop', null, 0], ['stop', null, 0], ['straight', null, 1], ['bank', 'left', 1], ['bank', 'right', 1]]
      },
      aheadx: {
        far: [['straight', null, 2], ['bank', 'x', 3], ['bank', 'x', 2], ['bank', 'x', 2], ['bank', 'x', 2], ['turn', 'x', 2]],
        near: [['stop', null, 0], ['straight', null, 1], ['bank', 'x', 1], ['bank', 'x', 1], ['bank', 'x', 1], ['turn', 'x', 2]]
      },
      flankx: {
        far: [['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 2], ['bank', 'x', 3]],
        near: [['stop', null, 0], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 1], ['bank', 'x', 2]]
      },
      behindx: {
        far: [['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 1], ['bank', 'x', 1]],
        near: [['stop', null, 0], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 2], ['bank', 'x', 3]]
      },
      behind: {
        far: [['turn', 'left', 2], ['turn', 'left', 2], ['turn', 'left', 2], ['turn', 'right', 2], ['turn', 'right', 2], ['turn', 'right', 2]],
        near: [['stop', null, 0], ['stop', null, 0], ['turn', 'left', 2], ['turn', 'right', 2], ['bank', 'left', 3], ['bank', 'right', 3]]
      }
    };

    return LambdaShuttle;

  })(EnemyAi);

  exportObj.shipAi.Vt49Decimator = (function(superClass) {
    extend(Vt49Decimator, superClass);

    function Vt49Decimator() {
      return Vt49Decimator.__super__.constructor.apply(this, arguments);
    }

    Vt49Decimator.prototype.name = 'VT-49 Decimator';

    Vt49Decimator.prototype.id = 'vt49decimator';

    Vt49Decimator.prototype.color_dict = {};

    Vt49Decimator.prototype.genericMovement_dict = {
      ahead: {
        far: [['straight', null, 4], ['straight', null, 4], ['straight', null, 4], ['straight', null, 3], ['straight', null, 3], ['straight', null, 2]],
        near: [['straight', null, 4], ['straight', null, 4], ['bank', 'left', 3], ['bank', 'right', 3], ['turn', 'left', 3], ['turn', 'right', 3]]
      },
      aheadx: {
        far: [['straight', null, 4], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 3]],
        near: [['straight', null, 4], ['straight', null, 4], ['bank', 'x', 3], ['bank', 'y', 3], ['bank', 'y', 2], ['turn', 'y', 2]]
      },
      flankx: {
        far: [['bank', 'x', 3], ['turn', 'x', 3], ['turn', 'x', 3], ['turn', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 1]],
        near: [['bank', 'x', 3], ['bank', 'x', 3], ['turn', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 1]]
      },
      behindx: {
        far: [['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 3], ['turn', 'x', 3], ['bank', 'x', 1]],
        near: [['bank', 'x', 3], ['bank', 'x', 3], ['bank', 'x', 2], ['turn', 'x', 2], ['turn', 'x', 2], ['bank', 'x', 1]]
      },
      behind: {
        far: [['turn', 'left', 2], ['turn', 'left', 2], ['turn', 'left', 2], ['turn', 'right', 2], ['turn', 'right', 2], ['turn', 'right', 2]],
        near: [['turn', 'left', 3], ['turn', 'left', 2], ['bank', 'left', 1], ['turn', 'right', 3], ['turn', 'right', 2], ['bank', 'right', 1]]
      }
    };

    return Vt49Decimator;

  })(EnemyAi);

}).call(this);
